{
  "addHttpClientWithHttpMessageHandler": {
    "body": [
      "builder.Services.AddHttpClient<${1:YourService}>(s => s.BaseAddress = new Uri(${2:builder.HostEnvironment.BaseAddress}))",
      "\t.AddHttpMessageHandler<${3:BaseAddressAuthorizationMessageHandler}>();$0"
    ],
    "description": "Add HttpClient with HttpMessageHandler",
    "prefix": "yAddHttpClientWithHttpMessageHandler"
  },
  "apiControllerAttribute": {
    "body": [
      "[ApiController]",
      "$0"
    ],
    "description": "ApiController attribute",
    "prefix": "yApiControllerAttribute"
  },
  "authenticationStateTaskParameter": {
    "body": [
      "[CascadingParameter$1] ${2:protected} Task$3<AuthenticationState$4> ${5:AuthenticationState} { get; set; }$0"
    ],
    "description": "Cascading parameter AuthenticationState",
    "prefix": "yCascadingParaAuthState"
  },
  "authorizeAttribute": {
    "body": [
      "[Authorize]",
      "$0"
    ],
    "description": "AuthorizeAttribute",
    "prefix": "yAuthorizeAttribute"
  },
  "builderAddDbContext": {
    "body": "builder.Services.AddDbContext<${1:DataContext}>();$0",
    "description": "Inserts builder.Services.AddDbContext",
    "prefix": "yBuiAddDbContext"
  },
  "builderAddDbContextSqlServer": {
    "body": "builder.Services.AddDbContext<${1:DataContext}>(options => options.UseSqlServer(\"name=ConnectionStrings:${2:DbConnection}\"));$0",
    "description": "Inserts builder.Services.AddDbContext.Options.UseSqlServer",
    "prefix": "yBuiAddDbContextUseSqlServer"
  },
  "builderAddHttPClientScoped": {
    "body": "builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });$0",
    "description": "Inserts builder.Services.AddScoped HttpClient",
    "prefix": "yBuiServicesAddHttpClient"
  },
  "builderEntity": {
    "body": [
      "modelBuilder.Entity<${1:ClassName}>()$0;"
    ],
    "description": "builder.Entity stub",
    "prefix": "yBuilderEntity"
  },
  "builderServicesAddScoped": {
    "body": "builder.Services.AddScoped<I${1:Name}Service$2,${3:$1}Service>()$0",
    "description": "Inserts builder.Services.AddScoped INameService NameService",
    "prefix": "yBuiServicesAddScoped"
  },
  "cascadingPara": {
    "body": [
      "[CascadingParameter$1] ${2:private} ${3:string} ${4:Name} { get; set; }$0"
    ],
    "description": "Inserts a CascadingParameter attribute",
    "prefix": "yCascadingPara"
  },
  "cascadingParaProp": {
    "body": [
      "[CascadingParameter$1] ${2:private} ${3:string} ${4:Name} { get; set; }$0"
    ],
    "description": "Inserts a property with CascadingParameter attribute",
    "prefix": "yCascadingParaProp"
  },
  "compareAttribute": {
    "body": [
      "[Compare$1(nameof(${2:TypeToCompare}), ErrorMessage=\"${3:$2}s ${4:does not match!}\")]",
      "$0"
    ],
    "description": "Compare attribute",
    "prefix": "yCompareAttribute"
  },
  "createAsyncMethodDefinition": {
    "body": "Task$1<${2:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$3> Create${4:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Async(${5:$2} ${6:${5/(.*)/${1:/downcase}/}});$0",
    "description": "Adds a CreateAsync method Definition to an Interface ",
    "prefix": "yCreateAsyncMethodDefinition"
  },
  "dataTypeAttribute": {
    "body": "[DataType$1(DataType.${2|CreditCard,Currency,Custom,Date,DateTime,Duration,EmailAddress,Html,ImageUrl,MultilineText,PhoneNumber|})]",
    "description": "DataType attribute",
    "prefix": "yDataTypeAttribute"
  },
  "dbSet": {
    "body": "public DbSet<${1:ClassName}$2> ${3:$1}s { get; set; }$0",
    "description": "Inserts a DbSet for a class statement in DbContext",
    "prefix": "yDbSet"
  },
  "dbSetNewSyntax": {
    "body": "public DbSet<${1:ClassName}$2> ${3:$1}s => Set<${4:$1}>();$0",
    "description": "Inserts a DbSet for a class statement in DbContext",
    "prefix": "yDbSetNewSyntax"
  },
  "deleteAsyncMethodDefinition": {
    "body": "Task$1 Delete${2:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Async(${3|Guid,int,string|} id);$0",
    "description": "Adds a DeleteAsync method definition for an interface",
    "prefix": "yDeleteAsyncMethodDefinition"
  },
  "emailAddressAttribute": {
    "body": [
      "[EmailAddress$1] $0"
    ],
    "description": "EmailAddress Attribute",
    "prefix": "yEmailAddressAttribute"
  },
  "eventCallback": {
    "body": [
      "[Parameter$1] public EventCallback$2 On${3:EventName} { get; set; }$0"
    ],
    "description": "EventCallback parameter",
    "prefix": "yEventCallback"
  },
  "eventCallbackChanged": {
    "body": [
      "[Parameter]",
      "public ${1:string} ${2:PropertyName} { get; set; }",
      "",
      "[Parameter]",
      "public EventCallback<$1> $2Changed { get; set; }$0"
    ],
    "description": "EventCallbackChanged",
    "prefix": "yEventCallbackChanged"
  },
  "eventCallbackExtended": {
    "body": [
      "[Parameter] public EventCallback<${1:MouseEventArgs}> On${2:Click} { get; set; }$0"
    ],
    "description": "EventCallbackExtended parameter",
    "prefix": "yEventCallbackExtended"
  },
  "eventHandler": {
    "body": [
      "${1:private} void ${2:Handle}(${3:MouseEventArgs} ${4:e})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "EventHandler method stub",
    "prefix": "yEventHandler"
  },
  "eventHandlerAsync": {
    "body": [
      "${1:private} async Task$2 ${3:HandleAsync}(${4:MouseEventArgs} ${5:e})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "EventHandlerAsync method stub",
    "prefix": "yEventHandlerAsync"
  },
  "getAsyncMethodDefinition": {
    "body": "\tTask$2<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$3> Get${4:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Async(${5|Guid,int,string|}$6 ${7:id});$0",
    "description": "Inserts a GetAsync method definition for an interface",
    "prefix": "yGetAsyncMethodDefinition"
  },
  "getListAsyncMethodDefinition": {
    "body": "\tTask$1<List<${2:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$3>> Get${4:$2}sAsync($6);$0",
    "description": "Inserts a GetListAsync definition for an interface",
    "prefix": "yGetListAsyncMethodDefinition"
  },
  "getPrivateSet": {
    "body": [
      "{ get; private set; }$0"
    ],
    "description": "{ get, private set }",
    "prefix": "yGps"
  },
  "getSet": {
    "body": [
      "{ get; set; }$0"
    ],
    "description": "{ get, set }",
    "prefix": "yGs"
  },
  "handleFileChosenAsync": {
    "body": [
      "\\ @inject HttpClient Http",
      "[Parameter]",
      "public blazoract.Shared.Cell Cell { get; set; }",
      "",
      "private string status = null;",
      "",
      "private async Task HandleFileChosenAsync(InputFileChangeEventArgs eventArgs)",
      "{",
      "    status = $\"Sending {eventArgs.File.Size.ToDisplayString()}...\";",
      "",
      "    // Stream the data directly to the backend API",
      "    using var fileStream = eventArgs.File.OpenReadStream(maxAllowedSize: 5*1024*1024);",
      "    var url = $\"api/code/uploadfile?notebookId={Cell.NotebookId}&variable={Cell.Content}\";",
      "    await Http.PostAsync(url, new StreamContent(fileStream));",
      "",
      "    status = $\"Finished sending {eventArgs.File.Size.ToDisplayString()}\";",
      "}"
    ],
    "description": "Inserts the HandleFileChosenAsync method for an InputFile element",
    "prefix": "yHandleFileChosenAsync"
  },
  "httpClientGetAsync": {
    "body": [
      "${1:var response =} await ${1|HttpClient,_httpClient,Http,_http|}.GetAsync$2(\"${3:url}\");$0"
    ],
    "description": "Http.GetAsync call",
    "prefix": "yHttpGetAsync"
  },
  "httpDeleteAsync": {
    "body": [
      "await ${1|HttpClient,_httpClient,Http,_http|}.DeleteAsync($\"${2:url}/{${3:id}}\");$0"
    ],
    "description": "Http.DeleteAsync call",
    "prefix": "yHttpDeleteAsync"
  },
  "httpGetFromByIdJsonAsync": {
    "body": [
      "${1|var response =, response =, return|} await ${2|HttpClient,_httpClient,Http,_http|}.GetFromJsonAsync$3<${4:ResponseType}>($\"${5:url}/{${6:$4}Id}\");$0"
    ],
    "description": "Http.GetFromByIdJsonAsync call",
    "prefix": "yHttpGetFromByIdJsonAsync"
  },
  "httpGetFromJsonAsync": {
    "body": [
      "${1|var response =, response =, return|} await ${2|HttpClient,_httpClient,Http,_http|}.GetFromJsonAsync$3<${4:ResponseType}>(\"${5:url}\");$0"
    ],
    "description": "Http.GetFromJsonAsync call",
    "prefix": "yHttpGetFromJsonAsync"
  },
  "httpPostAsJsonAsync": {
    "body": [
      "var ${1:response} = await ${2|HttpClient,_httpClient,Http,_http|}.PostAsJsonAsync$3(\"${4:url}\", ${5:value});",
      "// response.EnsureSuccessStatusCode();",
      "var ${6:result} = await response.Content.ReadFromJsonAsync<${8:TypeName}>();"
    ],
    "description": "Http.PostAsJsonAsync call",
    "prefix": "yHttpPostAsJsonAsync"
  },
  "httpPostAsync": {
    "body": [
      "var ${1:response} = await ${2|HttpClient,_httpClient,Http,_http|}.PostAsync$3(\"${4:url}\", ${5:value});",
      "response.EnsureSuccessStatusCode();"
    ],
    "description": "Http.PostAsync call",
    "prefix": "yHttpPostAsync"
  },
  "httpPutAsJsonAsync": {
    "body": [
      "var ${1:response} = await ${2|HttpClient,_httpClient,Http,_http|}.PutAsJsonAsync$3(\"${4:url}\", ${5:value});",
      "response.EnsureSuccessStatusCode();$0"
    ],
    "description": "Http.PutAsJsonAsync call",
    "prefix": "yHttpPutAsJsonAsync"
  },
  "iEnumerable": {
    "body": [
      "IEnumerable$1<${2:TypeName}>$0"
    ],
    "description": "IEnumerable statement",
    "prefix": "yIEnumerable"
  },
  "ifInlineStatement": {
    "body": [
      "if (${1:MyCondition}) $2",
      "$0"
    ],
    "description": "If inline statement",
    "prefix": "yIfInline"
  },
  "ifNotNullAndCountGreaterThan0Statement": {
    "body": [
      "if (${1:MyVariable} != null && ${2:$1}.Count > 0)",
      "{",
      "\t$3",
      "}",
      "$0"
    ],
    "description": "If not null statement and count greater than zero statement",
    "prefix": "yIfNotNullAndCountGreaterThan0Statement"
  },
  "ifNotNullInlineStatement": {
    "body": [
      "if (${1:MyVariable} != null) $2",
      "$0"
    ],
    "description": "If not null inline statement",
    "prefix": "yIfNotNullInline statement"
  },
  "ifNotNullStatement": {
    "body": [
      "if (${1:MyVariable} != null)",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "If not null statement",
    "prefix": "yIfNotNull"
  },
  "ifNullInlineStatement": {
    "body": [
      "if (${1:MyVariable} == null) $2",
      "$0"
    ],
    "description": "If null inline statement",
    "prefix": "yIfNullInline statement"
  },
  "ifNullOrCountIsZeroStatement": {
    "body": [
      "if (${1:MyVariable} == null || ${2:$1}.Count == 0)",
      "{",
      "\t$3",
      "}",
      "$0"
    ],
    "description": "If null Or Count is zero statement",
    "prefix": "yIfNullOrCountIsZeroStatement"
  },
  "ifNullReturnDefaultStatement": {
    "body": "if (${1:MyVariable} == null) return ${2:default};$0",
    "description": "If null return default statement",
    "prefix": "yIfNullReturnDefault statement"
  },
  "ifNullReturnStatement": {
    "body": "if (${1:MyVariable} == null) return;$0",
    "description": "If null return statement",
    "prefix": "yIfNullReturn statement"
  },
  "ifNullStatement": {
    "body": [
      "if (${1:MyVariable} == null)",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "If null statement",
    "prefix": "yIfNull"
  },
  "ifStatement": {
    "body": [
      "if (${1:MyCondition})",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "If statement",
    "prefix": "yIf"
  },
  "implementCorrespondingInterface": {
    "body": "I${TM_FILENAME_BASE}$0",
    "description": "Implements corresponding interface",
    "prefix": "yImpCorrespondingInterface"
  },
  "inheritsComponentBase": {
    "body": [
      " ComponentBase$1"
    ],
    "description": "Inherits ComponentBase",
    "prefix": "yInheritsComponentBase"
  },
  "injectAttribute": {
    "body": [
      "[Inject$1]$0"
    ],
    "description": "Inserts InjectAttribute",
    "prefix": "yInjectAttribute"
  },
  "injectHttpClient": {
    "body": [
      "[Inject$1] public HttpClient$2 ${3|HttpClient,Http|} { get; set; }$0"
    ],
    "description": "Inject HttpClient property",
    "prefix": "yInjectHttpClient"
  },
  "injectIJSRuntime": {
    "body": [
      "[Inject$1] public IJSRuntime$2 ${3|JSRuntime,Js|} { get; set; }$0"
    ],
    "description": "Inject IJSRuntime property",
    "prefix": "yInjectIJSRuntime"
  },
  "injectIMapper": {
    "body": [
      "[Inject$1] public IMapper$2 ${3:Mapper} { get; set; }$0"
    ],
    "description": "Inject IMapper property",
    "prefix": "yInjectIMapper"
  },
  "injectNavigationManager": {
    "body": [
      "[Inject$1] public NavigationManager$2? ${3|NavigationManager,Navigation,Nav|} { get; set; }$0"
    ],
    "description": "Inject NavigationManager property",
    "prefix": "yInjectNavigationManager"
  },
  "injectService": {
    "body": [
      "[Inject$1] ${2|protected,public|} I${4:$3}? ${3:Name} { get; set; }$0"
    ],
    "description": "Inject MyService MyService",
    "prefix": "yInjectService"
  },
  "injectSignOutSessionStateManager": {
    "body": [
      "[Inject$1] public SignOutSessionStateManager$2 ${3:SignOutManager} { get; set; }$0"
    ],
    "description": "Inject SignOutSessionStateManager property",
    "prefix": "yInjectSignOutSessionStateManager"
  },
  "invokeAsyncEventCallback": {
    "body": [
      "await On${1:MyEventCallBack}.InvokeAsync(${3:MyParameter});"
    ],
    "description": "Invoke async Eventcallback",
    "prefix": "yInvokeAsyncEventCallback"
  },
  "isNotNull": {
    "body": [
      "!= null$0"
    ],
    "description": "Is not null",
    "prefix": "yIsNotNull"
  },
  "isNull": {
    "body": [
      "== null$0"
    ],
    "description": "Is equal to null",
    "prefix": "yIsNull"
  },
  "jSRuntimeInvokeAsync": {
    "body": [
      "${1|await, return|} ${2|JSRuntime,jsRuntime,Js,jS|}.InvokeAsync<${3:TResult}>(\"${4:Path-to-JavaScript-function}\", ${5:arguments});"
    ],
    "description": "JSRuntimeInvokeAsync call",
    "prefix": "yJSRuntimeInvokeAsync"
  },
  "jSRuntimeInvokeVoidAsync": {
    "body": [
      "await ${1|JSRuntime,Js|}.InvokeVoidAsync(\"${3:Path-to-JavaScript-function}\", ${4:arguments});"
    ],
    "description": "JSRuntimeInvokeVoidAsync call",
    "prefix": "yJSRuntimeInvokeVoidAsync"
  },
  "localStorageGetItem": {
    "body": "var ${1:result} = await _localStorage.GetItemAsync<${2:Type}>(\"${3:Key}\");$0",
    "description": "Inserts await _localStorage.GetItemAsync stub",
    "prefix": "yLocalStorageGetItemAsync"
  },
  "localStorageSetItem": {
    "body": " await _localStorage.SetItemAsync(\"${1:key}\", ${2:item});$0",
    "description": "Inserts await _localStorage.SetItemAsync stub",
    "prefix": "yLocalStorageSetItemAsync"
  },
  "methodAsync": {
    "body": [
      "${1|internal,private,public,protected|} async Task$2 ${3:MethodName}${4:Async}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "async method stub without arguments",
    "prefix": "yMethodAsync"
  },
  "methodAsyncReturn": {
    "body": [
      "${1|internal,private,public,protected|} async Task<${2:ReturnType}> ${3:MethodName}${4:Async}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "async task method stub without arguments",
    "prefix": "yMethodAsyncReturn"
  },
  "methodAsyncReturnWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} async Task<${2:ReturnType}> ${3:MethodName}${4:Async}(${5:paramType} ${6:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "async task method stub with arguments",
    "prefix": "yMethodAsyncReturnWithArgs"
  },
  "methodAsyncWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} async Task$2 ${3:MethodName}${4:Async}(${5:paramType} ${6:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "async method stub with arguments",
    "prefix": "yMethodAsyncWithArgs"
  },
  "methodReturn": {
    "body": [
      "${1|internal,private,public,protected|} ${2:ReturnType} ${3:MethodName}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "method stub without arguments",
    "prefix": "yMethodReturn"
  },
  "methodReturnWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} ${2:ReturnType} ${3:MethodName}(${4:paramType} ${5:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "method stub with arguments",
    "prefix": "yMethodReturnWithArgs"
  },
  "methodVoid": {
    "body": [
      "${1|internal,private,public,protected|} void ${3:MethodName}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "void method stub without arguments",
    "prefix": "yMethodVoid"
  },
  "methodVoidWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} void ${3:MethodName}(${4:paramType} ${5:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "void method stub with arguments",
    "prefix": "yMethodVoidWithArgs"
  },
  "modelBuilderEntity": {
    "body": [
      "modelBuilder.Entity<${1:ClassName}>()$0;"
    ],
    "description": "builder.Entity stub",
    "prefix": "yModelBuilderEntity"
  },
  "navigateTo": {
    "body": [
      "${1|NavigationManager,Navigation,Nav,_navigationManager|}!.NavigateTo(\"${2:routeUrl}\", ${3|false,true|});$0"
    ],
    "description": "NavigationManager.NavigateTo page",
    "prefix": "yNavigateToPage"
  },
  "navigateToId": {
    "body": [
      "${1|NavigationManager,Navigation,Nav,_navigationManager|}!.NavigateTo($\"${2:routeUrl}/{${3:id}}\", ${4|false,true|});$0"
    ],
    "description": "NavigationManager.NavigateTo page\\Id",
    "prefix": "yNavigateToId"
  },
  "onAfterRender": {
    "body": [
      "protected override void OnAfterRender(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnAfterRender method stub",
    "prefix": "yOnAfterRender"
  },
  "onAfterRenderAsync": {
    "body": [
      "protected override async Task$1 OnAfterRenderAsync(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnAfterRenderAsync method stub",
    "prefix": "yOnAfterRenderAsync"
  },
  "onInitialized": {
    "body": [
      "protected override void OnInitialized()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnInitialized method stub",
    "prefix": "yOnInitialized"
  },
  "onInitializedAsync": {
    "body": [
      "protected override async Task$1 OnInitializedAsync()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnInitializedAsync method stub",
    "prefix": "yOnInitializedAsync"
  },
  "onParametersSet": {
    "body": [
      "protected override void OnParametersSet()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnParameterSet method stub",
    "prefix": "yOnParametersSet"
  },
  "onParametersSetAsync": {
    "body": [
      "protected override async Task$1 OnParametersSetAsync()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnParameterSetAsync method stub",
    "prefix": "yOnParametersSetAsync"
  },
  "paginationState": {
    "body": [
      "protected PaginationState pagination = new PaginationState { ItemsPerPage = ${1:10};$0"
    ],
    "description": "Inserts a PaginationState field",
    "prefix": "yPaginationState"
  },
  "parameterAttribute": {
    "body": [
      "[Parameter$1]$0"
    ],
    "description": "Inserts a Parameter attribute",
    "prefix": "yParaAttribute"
  },
  "parameterCaptureUnmatchedValues ": {
    "body": [
      "[Parameter$1(CaptureUnmatchedValues = true)] public Dictionary<string, object> ${2:Attributes} { get; set; }$0"
    ],
    "description": "Parameter CaptureUnmatchedValues attribute",
    "prefix": "yParaCaptureUnmatchedValues"
  },
  "parameterIdProperty": {
    "body": [
      "[Parameter$1] public ${2|int,bool,DateTime,decimal,double,float,guid,long,string|} Id { get; set; }$0"
    ],
    "description": "Inserts an Id property with Parameter attribute",
    "prefix": "yParaIdProp"
  },
  "parameterProperty": {
    "body": [
      "[Parameter$1] public ${2:Type} ${3:PropertyName} { get; set; }$0"
    ],
    "description": "Inserts a property with Parameter attribute",
    "prefix": "yParaProp"
  },
  "propBirthDate": {
    "body": [
      "public DateTime$1 BirthDate { get; ${2|set;,private set;|}  }$0"
    ],
    "description": "Inserts a BirthDate property ",
    "prefix": "yPropBirthDate"
  },
  "propCity": {
    "body": [
      "public string ${1:City} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a City property ",
    "prefix": "yPropCity"
  },
  "propConfirmPassword": {
    "body": "public string ${1:ConfirmPassword} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a ConfirmPassword property ",
    "prefix": "yPropConfirmPassword"
  },
  "propCountry": {
    "body": [
      "public string ${1:Country} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a Country property ",
    "prefix": "yPropCountry"
  },
  "propDescription": {
    "body": [
      "public string Description{ get; ${1|set;,private set;|} }$0"
    ],
    "description": "Inserts a Description property ",
    "prefix": "yPropDescription"
  },
  "propEmail": {
    "body": "public string ${1:Email} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Email property ",
    "prefix": "yPropEmail"
  },
  "propEndDate": {
    "body": [
      "public DateTime$2 ${1:EndDate }{ get; ${3|set;,private set;|}  }$0"
    ],
    "description": "Inserts a DateTime EndDate property ",
    "prefix": "yPropEndDate"
  },
  "propEndTime": {
    "body": [
      "public DateTime$2 ${1:EndTime} { get; ${3|set;,private set;|}  }$0"
    ],
    "description": "Inserts a DateTime EndTime property ",
    "prefix": "yPropEndTime"
  },
  "propFilter": {
    "body": [
      "public string Filter{ get; set; }$0"
    ],
    "description": "Inserts a Filter property ",
    "prefix": "yPropFilter"
  },
  "propFirstName": {
    "body": [
      "public string ${1:FirstName} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a First Name property ",
    "prefix": "yPropFirstName"
  },
  "propId": {
    "body": [
      "public ${1|Guid,int,string|} ${2:Id} { get; ${3|set;,private set;|} }$0"
    ],
    "description": "Inserts an Id property",
    "prefix": "yPropId"
  },
  "propImageUrl": {
    "body": "public string ${1:ImageUrl} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts an ImageUrl property ",
    "prefix": "yPropImageUrl"
  },
  "propLastName": {
    "body": [
      "public string ${1:LastName} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a First Name property ",
    "prefix": "yPropLastName"
  },
  "propMobilePhone": {
    "body": [
      "public string ${1:MobilePhone} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a Mobile Phone property ",
    "prefix": "yPropMobilePhone"
  },
  "propName": {
    "body": "public string ${1:Name} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Name property ",
    "prefix": "yPropName"
  },
  "propPage": {
    "body": [
      "public int Page { get; set;} }$0"
    ],
    "description": "Inserts a Page property",
    "prefix": "yPropPage"
  },
  "propPassword": {
    "body": "public string ${1:Password} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Password property ",
    "prefix": "yPropPassword"
  },
  "propPhone": {
    "body": [
      "public string ${1:Phone} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a Phone property ",
    "prefix": "yPropPhone"
  },
  "propPrice": {
    "body": [
      "public decimal Price{ get; ${2|set;,private set;|}  }$0"
    ],
    "description": "Inserts a Price property ",
    "prefix": "yPropPrice"
  },
  "propStartDate": {
    "body": [
      "public DateTime$2 ${1:StartDate} { get; ${3|set;,private set;|} }$0"
    ],
    "description": "Inserts a DateTime StartDate property ",
    "prefix": "yPropStartDate"
  },
  "propStartTime": {
    "body": [
      "public DateTime$2 ${1:StartTime} { get; ${3|set;,private set;|}  }$0"
    ],
    "description": "Inserts a DateTime StartTime property ",
    "prefix": "yPropStartTime"
  },
  "propStreet": {
    "body": [
      "public string ${1:Street} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a Street property ",
    "prefix": "yPropStreet"
  },
  "propTitle": {
    "body": [
      "public string Title { get; ${1|set;,private set;|} }$0"
    ],
    "description": "Inserts an Title property ",
    "prefix": "yPropTitle"
  },
  "propUserName": {
    "body": [
      "public string ${1:UserName} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a UserName property ",
    "prefix": "yPropUserName"
  },
  "propZipCode": {
    "body": [
      "public string ${1:ZipCode} { get; ${2|set;,private set;|} }$0"
    ],
    "description": "Inserts a ZipCode property ",
    "prefix": "yPropZipCode"
  },
  "rangeAttribute": {
    "body": [
      "[Range$1(${2:0},${2:1000})]$0"
    ],
    "description": "Range attribute",
    "prefix": "yRangeAttribute"
  },
  "readFromJsonAsync": {
    "body": [
      "${1|var responseObject =, responseObject =, return|} await ${2:result}.Content.ReadFromJsonAsync$3<${4:ResponseType}>();$0"
    ],
    "description": "ReadFromJsonAsync call",
    "prefix": "yReadFromJsonAsync"
  },
  "readIdFromJsonAsync": {
    "body": [
      "var ${1:Name}Id = await response.Content.ReadFromJsonAsync<${2|int,string,Guid|}>();$0"
    ],
    "description": "ReadFromJsonAsync call",
    "prefix": "yReadIdFromJsonAsync"
  },
  "readOnlyHttpClientField": {
    "body": [
      "private readonly HttpClient$2 ${3|_httpClient,_http,http|};$0"
    ],
    "description": "Readonly HttpClient field",
    "prefix": "yReadOnlyHttpClientField"
  },
  "requiredAttribute": {
    "body": [
      "[Required$1]",
      "$0"
    ],
    "description": "RequiredAttribute",
    "prefix": "yRequiredAttribute"
  },
  "routeAttribute": {
    "body": [
      "[Route(\"${1:api/[controller]/[action]}\")]",
      "$0"
    ],
    "description": "RouteAttribute",
    "prefix": "yRouteAttribute"
  },
  "setParametersAsync": {
    "body": [
      "public override async Task$1 SetParametersAsync(ParameterView Parameters)",
      "{",
      "\t$0",
      "",
      "\tawait base.SetParametersAsync(Parameters);",
      "}"
    ],
    "description": "SetParametersAsync method stub",
    "prefix": "ySetParametersAsync"
  },
  "shouldRender": {
    "body": [
      "protected override bool ShouldRender()",
      "{",
      "\t$0",
      "\treturn true;",
      "}"
    ],
    "description": "ShouldRender method stub",
    "prefix": "yShouldRender"
  },
  "stateHasChanged": {
    "body": "StateHasChanged();$0",
    "description": "Inserts StateHasChanged() method",
    "prefix": "yStateHasChanged"
  },
  "stringLengthAttribute": {
    "body": [
      "[StringLength(${1:50})$2]$0"
    ],
    "description": "StringLength attribute",
    "prefix": "yStringLengthAttribute"
  },
  "updateAsyncMethodDefinition": {
    "body": "Task$1 Update${2:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Async(${3|Guid,int,string|} id, ${4:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$5 ${6:${4/(.*)/${1:/downcase}/}});$0",
    "description": "Adds a UpdateAsync method definition for an interface",
    "prefix": "yUpdateAsyncMethodDefinition"
  }
  
}