{
  "addHttpClientWithHttpMessageHandler": {
    "body": [
      "builder.Services.AddHttpClient<${1:YourService}>(s => s.BaseAddress = new Uri(${2:builder.HostEnvironment.BaseAddress}))",
      "\t.AddHttpMessageHandler<${3:BaseAddressAuthorizationMessageHandler}>();$0"
    ],
    "description": "Inserts AddHttpClient with HttpMessageHandler",
    "prefix": "yAddHttpClientWithHttpMessageHandler"
  },
  "apiControllerAttribute": {
    "body": ["[ApiController]", "$0"],
    "description": "inserts an ApiController attribute",
    "prefix": "yApiControllerAttribute"
  },
  "authenticationStateTaskParameter": {
    "body": [
      "[CascadingParameter$1] ${2:protected} Task$3<AuthenticationState$4> ${5:AuthenticationState} { get; set; }$0"
    ],
    "description": "Inserts a CascadingParameter AuthenticationState Property",
    "prefix": "yCascadingParaAuthState"
  },
  "authorizeAttribute": {
    "body": ["[Authorize]", "$0"],
    "description": "Inserts an AuthorizeAttribute",
    "prefix": "yAuthorizeAttribute"
  },
  "builderAddDbContext": {
    "body": "builder.Services.AddDbContext<${1:DataContext}>();$0",
    "description": "Inserts a builder.Services.AddDbContext",
    "prefix": "yBuiAddDbContext"
  },
  "builderAddDbContextSqlServer": {
    "body": "builder.Services.AddDbContext<${1:DataContext}>(options => options.UseSqlServer(\"name=ConnectionStrings:${2:DbConnection}\"));$0",
    "description": "Inserts builder.Services.AddDbContext.Options.UseSqlServer",
    "prefix": "yBuiAddDbContextUseSqlServer"
  },
  "builderAddHttPClientScoped": {
    "body": "builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });$0",
    "description": "Inserts builder.Services.AddScoped HttpClient",
    "prefix": "yBuiServicesAddHttpClient"
  },
  "builderEntity": {
    "body": "${1|builder, modelBuilder|}.Entity<${2:ClassName}>()$0;",
    "description": "inserts builder.Entity stub",
    "prefix": "yBuilderEntity"
  },
  "builderServicesAddScoped": {
    "body": "builder.Services.AddScoped<I${1:Name}Service$2, ${3:$1}Service>();$0",
    "description": "Inserts builder.Services.AddScoped INameService NameService",
    "prefix": "yBuiServicesAddScoped"
  },
  "cascadingPara": {
    "body": [
      "[CascadingParameter$1] ${2:private} ${3:string} ${4:Name} { get; set; }$0"
    ],
    "description": "Inserts a CascadingParameter attribute",
    "prefix": "yCascadingPara"
  },
  "cascadingParaProp": {
    "body": [
      "[CascadingParameter$1] ${2:private} ${3:string} ${4:Name} { get; set; }$0"
    ],
    "description": "Inserts a property with CascadingParameter attribute",
    "prefix": "yCascadingParaProp"
  },
  "columnTypeNameDecimalAttribute": {
    "body": "[Column$1(TypeName =\"decimal(${2:18},${3:2})\")]$0",
    "description": "Inserts a ColumnType TypeName decimal attribute",
    "prefix": "yColumnTypeNameDecimalAttribute"
  },
  "compareAttribute": {
    "body": "[Compare$1(nameof(${2:TypeToCompare}), ErrorMessage=\"${3:$2}s ${4:does not match!}\")]$0",
    "description": "Inserts a Compare attribute",
    "prefix": "yCompareAttribute"
  },
  "createAsyncMethodDefinition": {
    "body": "Task<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$2> CreateAsync(${3:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$4 ${5:${3/(.*)/${1:/downcase}/}});$0",
    "description": "Inserts a CreateAsync method Definition to an Interface ",
    "prefix": "yCreateAsyncMethodDefinition"
  },
  "createAsyncResultMethodDefinition": {
    "body": "\tTask<Result<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Dto>> CreateAsync(Create$1Dto$2 input);$0",
    "description": "Inserts a CreateAsync Result method definition",
    "prefix": "yCreateAsyncResultMethodDefinition"
  },
  "crudIServiceMethodDefinitions": {
    "body": [
      "public interface ${TM_FILENAME_BASE}",
      "{",
      "\tTask$2<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Dto$7> GetAsync(${4|Guid,int,string|}$5 ${6:id});",
      "",
      "\tTask<PagedResultDto$7<$1Dto>>$8 GetListAsync(Get$1ListDto$9? input = null);",
      "",
      "\tTask<$1Dto> CreateAsync(Create$1Dto$10 input);",
      "",
      "\tTask<$1Dto> UpdateAsync($4 $6, Update$1Dto$11 input);",
      "",
      "\tTask<bool> DeleteAsync($4 $6);",
      "",
      "}$0"
    ],
    "description": "Inserts an IService interface with CRUD method definitions",
    "prefix": "yCrudIServiceMethodDefinitions"
  },
  "crudResultIServiceMethodDefinitions": {
    "body": [
      "public interface ${TM_FILENAME_BASE}",
      "{",
      "\tTask$2<Result$3<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Dto$7>> GetAsync(${4|Guid,int,string|}$5 ${6:id});",
      "",
      "\tTask<Result<PagedResultDto$7<$1Dto>$8>> GetListAsync(Get$1ListDto$9? input = null);",
      "",
      "\tTask<Result<$1Dto>> CreateAsync(Create$1Dto$10 input);",
      "",
      "\tTask<Result<$1Dto>> UpdateAsync($4 $6, Update$1Dto$11 input);",
      "",
      "\tTask<Result> DeleteAsync($4 $6);",
      "",
      "}$0"
    ],
    "description": "Inserts an IService interface with CRUD Result method definitions",
    "prefix": "yCrudResultIServiceMethodDefinitions"
  },
  "dataTypeAttribute": {
    "body": "[DataType$1(DataType.${2|CreditCard,Currency,Custom,Date,DateTime,Duration,EmailAddress,Html,ImageUrl,MultilineText,PhoneNumber|})]$0",
    "description": "Inserts a DataType attribute",
    "prefix": "yDataTypeAttribute"
  },
  "dbSaveChangesAsync": {
    "body": " await ${1|_db, _dbContext, db, context|}.SaveChangesAsync();$0",
    "description": "Inserts _dbContext.SaveChangesAsync",
    "prefix": "yDbSaveChangesAsync"
  },
  "dbSet": {
    "body": "public DbSet<${1:ClassName}$2> ${3:$1}s { get; set; }$0",
    "description": "Inserts a DbSet for a class in DbContext",
    "prefix": "yDbSet"
  },
  "dbSetNewSyntax": {
    "body": "public DbSet<${1:ClassName}$2> ${3:$1}s => Set<${4:$1}>();$0",
    "description": "Inserts a DbSet for a class in DbContext",
    "prefix": "yDbSetNewSyntax"
  },
  "deleteAsyncMethodDefinition": {
    "body": "Task<bool>$1 DeleteAsync(${2|Guid,int,string|} ${3:id});$0",
    "description": "Inserts a DeleteAsync method definition for an interface",
    "prefix": "yDeleteAsyncMethodDefinition"
  },
  "deleteAsyncResultMethodDefinition": {
    "body": "\tTask<Result> DeleteAsync(${1|Guid,int,string|}$2 id);$0",
    "description": "Inserts a DeleteAsync Result method definition",
    "prefix": "yDeleteAsyncResultMethodDefinition"
  },
  "emailAddressAttribute": {
    "body": "[EmailAddress$1] $0",
    "description": "Inserts an EmailAddress Attribute",
    "prefix": "yEmailAddressAttribute"
  },
  "eventCallback": {
    "body": [
      "[Parameter$1] public EventCallback$2 On${3:EventName} { get; set; }$0"
    ],
    "description": "Inserts an EventCallback property",
    "prefix": "yEventCallback"
  },
  "eventCallbackChanged": {
    "body": [
      "[Parameter]",
      "public ${1:string} ${2:PropertyName} { get; set; }",
      "",
      "[Parameter]",
      "public EventCallback<$1> $2Changed { get; set; }$0"
    ],
    "description": "Inserts an EventCallbackChanged property + property ",
    "prefix": "yEventCallbackChanged"
  },
  "eventCallbackExtended": {
    "body": [
      "[Parameter] public EventCallback<${1:MouseEventArgs}> On${2:Click} { get; set; }$0"
    ],
    "description": "Inserts an EventCallbackExtended OnClickProperty",
    "prefix": "yEventCallbackExtended"
  },
  "eventHandler": {
    "body": [
      "${1:private} void ${2:Handle}(${3:MouseEventArgs} ${4:e})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an EventHandler method stub",
    "prefix": "yEventHandler"
  },
  "eventHandlerAsync": {
    "body": [
      "${1:private} async Task$2 ${3:HandleAsync}(${4:MouseEventArgs} ${5:e})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an EventHandlerAsync method stub",
    "prefix": "yEventHandlerAsync"
  },
  "generateClassImplementingInterface": {
    "body": [
      "public class ${TM_FILENAME_BASE/([\\I])(.*)()/$2/gi}$2 : ${TM_FILENAME_BASE}$1",
      "{",
      "",
      "}"
    ],
    "description": "Generates a class and implements interface",
    "prefix": "yGenerateClassImplementingInterface"
  },
  "getAsyncMethodDefinition": {
    "body": "\tTask<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$2> GetAsync(${3|Guid,int,string|} ${4:id});$0",
    "description": "Inserts a GetAsync method definition for an interface",
    "prefix": "yGetAsyncMethodDefinition"
  },
  "getAsyncResultMethodDefinition": {
    "body": "\tTask<Result<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$2>> GetAsync(${3|Guid,int,string|} ${4:id});$0",
    "description": "Inserts a GetAsync Result method definition for an interface",
    "prefix": "yGetAsyncResultMethodDefinition"
  },
  "getListAsyncMethodDefinition": {
    "body": "\tTask<List<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$2>> GetListAsync($3);$0",
    "description": "Inserts a GetListAsync definition for an interface",
    "prefix": "yGetListAsyncMethodDefinition"
  },
  "getListAsyncResultMethodDefinition": {
    "body": "\tTask<Result<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Dto>$2> GetListAsync(Get$1ListDto$3? input = null);$0",
    "description": "Inserts a GetListAsync Result method definition",
    "prefix": "yGetListAsyncResultMethodDefinition"
  },
  "getPrivateSet": {
    "body": "{ get; private set; }$0",
    "description": "Inserts { get, private set }",
    "prefix": "yGps"
  },
  "getSet": {
    "body": "{ get; set; }$0",
    "description": "Inserts { get, set }",
    "prefix": "yGs"
  },
  "handleFileChosenAsync": {
    "body": [
      "\\ @inject HttpClient Http",
      "[Parameter]",
      "public blazoract.Shared.Cell Cell { get; set; }",
      "",
      "private string status = null;",
      "",
      "private async Task HandleFileChosenAsync(InputFileChangeEventArgs eventArgs)",
      "{",
      "    status = $\"Sending {eventArgs.File.Size.ToDisplayString()}...\";",
      "",
      "    // Stream the data directly to the backend API",
      "    using var fileStream = eventArgs.File.OpenReadStream(maxAllowedSize: 5*1024*1024);",
      "    var url = $\"api/code/uploadfile?notebookId={Cell.NotebookId}&variable={Cell.Content}\";",
      "    await Http.PostAsync(url, new StreamContent(fileStream));",
      "",
      "    status = $\"Finished sending {eventArgs.File.Size.ToDisplayString()}\";",
      "}"
    ],
    "description": "Inserts the HandleFileChosenAsync method for an InputFile element",
    "prefix": "yHandleFileChosenAsync"
  },
  "handleValidSubmitAsync": {
    "body": ["protected async void HandleValidSubmitAsync()", "{", "\t$0", "}"],
    "description": "Inserts the HandleValidSubmitAsync method stub",
    "prefix": "yHandleValidSubmitAsync"
  },
  "httpClientGetAsync": {
    "body": "${1:var response =} await ${2|_http,_httpClient,Http,HttpClient|}.GetAsync$3(\"api/${4:url}\");$0",
    "description": "Inserts an Http.GetAsync call",
    "prefix": "yHttpGetAsync"
  },
  "httpDeleteAsync": {
    "body": [
      "await ${1|_http,_httpClient,Http,HttpClient|}.DeleteAsync($\"api/${2:url}/{${3:id}}\");",
      "// return response.IsSuccessStatusCode;$0"
    ],
    "description": "Inserts an Http.DeleteAsync call",
    "prefix": "yHttpDeleteAsync"
  },
  "httpGetFromByIdJsonAsync": {
    "body": "${1|var response =, response =, return|} await ${2|_http,_httpClient,Http,HttpClient|}.GetFromJsonAsync$3<${4:ResponseType}>($\"api/${5:url}/{${6:id}}\");$0",
    "description": "Inserts an Http.GetFromByIdJsonAsync call",
    "prefix": "yHttpGetFromByIdJsonAsync"
  },
  "httpGetFromJsonAsync": {
    "body": "${1|var response =, response =, return|} await ${2|_http,_httpClient,Http,HttpClient|}.GetFromJsonAsync$3<${4:ResponseType}>(\"api/${5:url}\");$0",
    "description": "Inserts an Http.GetFromJsonAsync call",
    "prefix": "yHttpGetFromJsonAsync"
  },
  "httpPostAsJsonAsync": {
    "body": [
      "var ${1:response} = await ${2|_http,_httpClient,Http,HttpClient|}.PostAsJsonAsync$3(\"api/${4:url}\", ${5:value});",
      "// response.EnsureSuccessStatusCode();",
      "var ${6:responseObject} = await $1.Content.ReadFromJsonAsync<${8:TypeName}>();$0"
    ],
    "description": "Inserts an Http.PostAsJsonAsync call",
    "prefix": "yHttpPostAsJsonAsync"
  },
  "httpPostAsync": {
    "body": [
      "var ${1:response} = await ${2|_http,_httpClient,Http,HttpClient|}.PostAsync$3(\"api/${4:url}\", ${5:value});",
      "// response.EnsureSuccessStatusCode();$0"
    ],
    "description": "Inserts an Http.PostAsync call",
    "prefix": "yHttpPostAsync"
  },
  "httpPutAsJsonAsync": {
    "body": [
      "var ${1:response} = await ${2|_http,_httpClient,Http,HttpClient|}.PutAsJsonAsync$3($\"api/${4:url}/{${5:id}}\", ${6:value});",
      "// response.EnsureSuccessStatusCode();",
      "var ${7:responseObject} = await $1.Content.ReadFromJsonAsync<${8:TypeName}>();$0"
    ],
    "description": "Inserts an Http.PutAsJsonAsync call",
    "prefix": "yHttpPutAsJsonAsync"
  },
  "iEnumerable": {
    "body": "IEnumerable$1<${2:TypeName}>$0",
    "description": "Inserts an IEnumerable statement",
    "prefix": "yIEnumerable"
  },
  "ifInlineStatement": {
    "body": ["if (${1:MyCondition}) $2", "$0"],
    "description": "Inserts an If inline statement",
    "prefix": "yIfInline"
  },
  "ifNotNullAndCountGreaterThan0Statement": {
    "body": [
      "if (${1:MyVariable} != null && ${2:$1}.Count > 0)",
      "{",
      "\t$3",
      "}",
      "$0"
    ],
    "description": "Inserts an If not null statement and count greater than zero statement",
    "prefix": "yIfNotNullAndCountGreaterThan0Statement"
  },
  "ifNotNullInlineStatement": {
    "body": ["if (${1:MyVariable} != null) $2", "$0"],
    "description": "Inserts an If not null inline statement",
    "prefix": "yIfNotNullInline statement"
  },
  "ifNotNullStatement": {
    "body": ["if (${1:MyVariable} != null)", "{", "\t$2", "}", "$0"],
    "description": "Inserts an If not null statement",
    "prefix": "yIfNotNull"
  },
  "ifNotStringIsNullOrEmptyStatement": {
    "body": [
      "if (!string.IsNullOrEmpty(${1:MyVariable}))",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "Inserts an if(!string.IsNullOrEmpty(MyVariable))statement",
    "prefix": "yIfNotStringIsNullOrEmpty"
  },
  "ifNotStringIsNullOrWhiteSpaceStatement": {
    "body": [
      "if (!string.IsNullOrWhiteSpace(${1:MyVariable}))",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "Inserts an if(!string.IsNullOrWhiteSpace(MyVariable))statement",
    "prefix": "yIfNotStringIsNullOrWhiteSpace"
  },
  "ifNullInlineStatement": {
    "body": ["if (${1:MyVariable} == null) $2", "$0"],
    "description": "Inserts an If null inline statement",
    "prefix": "yIfNullInline"
  },
  "ifNullOrCountIsZeroReturnStatement": {
    "body": ["if (${1:MyVariable} == null || $1.Count == 0) return$2;$0"],
    "description": "Inserts an If null Or Count is zero statement",
    "prefix": "yIfNullOrCountIsZeroReturn"
  },
  "ifNullOrCountIsZeroStatement": {
    "body": [
      "if (${1:MyVariable} == null || ${2:$1}.Count == 0)",
      "{",
      "\t$3",
      "}",
      "$0"
    ],
    "description": "Inserts an If null Or Count is zero statement",
    "prefix": "yIfNullOrCountIsZero"
  },
  "ifNullReturnDefaultStatement": {
    "body": "if (${1:MyVariable} == null) return ${2:default}$3;$0",
    "description": "Inserts an If null return default statement",
    "prefix": "yIfNullReturnDefault"
  },
  "ifNullReturnStatement": {
    "body": "if (${1:MyVariable} == null) return$3;$0",
    "description": "Inserts an If null return statement",
    "prefix": "yIfNullReturn"
  },
  "ifNullStatement": {
    "body": ["if (${1:MyVariable} == null)", "{", "\t$2", "}", "$0"],
    "description": "If null statement",
    "prefix": "yIfNull"
  },
  "ifStatement": {
    "body": ["if (${1:MyCondition})", "{", "\t$2", "}", "$0"],
    "description": "Inserts an If statement",
    "prefix": "yIf"
  },
  "ifStringIsNullOrEmptyStatement": {
    "body": [
      "if (string.IsNullOrEmpty(${1:MyVariable}))",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "Inserts an if(string.IsNullOrEmpty(MyVariable))statement",
    "prefix": "yIfStringIsNullOrEmpty"
  },
  "ifStringIsNullOrWhiteSpaceStatement": {
    "body": [
      "if (string.IsNullOrWhiteSpace(${1:MyVariable}))",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "Inserts an if(string.IsNullOrWhiteSpace(MyVariable))statement",
    "prefix": "yIfStringIsNullOrWhiteSpace"
  },
  "implementCorrespondingInterface": {
    "body": "I${TM_FILENAME_BASE}$0",
    "description": "Implements corresponding interface",
    "prefix": "yImpCorrespondingInterface"
  },
  "inheritsAuthenticationStateProvider": {
    "body": " AuthenticationStateProvider$1",
    "description": "Inherits AuthenticationStateProvider",
    "prefix": "yInheritsAuthenticationStateProvider"
  },
  "inheritsComponentBase": {
    "body": " ComponentBase$1",
    "description": "Inherits ComponentBase",
    "prefix": "yInheritsComponentBase"
  },
  "injectAttribute": {
    "body": "[Inject$1]$0",
    "description": "Inserts an InjectAttribute",
    "prefix": "yInjectAttribute"
  },
  "injectAuthenticationStateProvider": {
    "body": "[Inject$1] ${2|protected,public|} AuthenticationStateProvider$3 ${4:AuthenticationStateProvider} { get; set; }$0",
    "description": "Inject AuthenticationStateProvider property",
    "prefix": "yInjectAuthenticationStateProvider"
  },
  "injectHttpClient": {
    "body": "[Inject$1] public HttpClient?$2 ${3|_http,_httpClient,Http,HttpClient|} { get; set; }$0",
    "description": "Inserts an Inject HttpClient property",
    "prefix": "yInjectHttpClient"
  },
  "injectIJSRuntime": {
    "body": "[Inject$1] public IJSRuntime$2 ${3|JSRuntime,Js|} { get; set; }$0",
    "description": "Inserts an Inject IJSRuntime property",
    "prefix": "yInjectIJSRuntime"
  },
  "injectILocalStorageService": {
    "body": "[Inject$1] ${2|protected,public|} ILocalStorageService$3 ${4|LocalStorage,Storage,_localStorage,_storage|} { get; set; }$0",
    "description": "Inserts an Inject ILocalStorageService property",
    "prefix": "yInjectILocalStorageService"
  },
  "injectIMapper": {
    "body": "[Inject$1] public IMapper$2 ${3:Mapper} { get; set; }$0",
    "description": "Inserts an Inject IMapper property",
    "prefix": "yInjectIMapper"
  },
  "injectISyncLocalStorageService": {
    "body": "[Inject$1] ${2|protected,public|} ISyncLocalStorageService$3 ${4|LocalStorage,Storage,_localStorage,_storage|} { get; set; }$0",
    "description": "Inserts an Inject ISyncLocalStorageService property",
    "prefix": "yInjectISyncLocalStorageService"
  },
  "injectNavigationManager": {
    "body": "[Inject$1] ${2|protected,public|} NavigationManager$3? ${4|NavigationManager,Navigation,Nav|} { get; set; }$0",
    "description": "Inserts an Inject NavigationManager property",
    "prefix": "yInjectNavigationManager"
  },
  "injectService": {
    "body": "[Inject$1] ${2|protected,public|} I${4:$3}? ${3:Name} { get; set; }$0",
    "description": "Inserts an Inject MyService MyService",
    "prefix": "yInjectService"
  },
  "injectSignOutSessionStateManager": {
    "body": "[Inject$1] public SignOutSessionStateManager$2 ${3:SignOutManager} { get; set; }$0",
    "description": "Inserts an Inject SignOutSessionStateManager property",
    "prefix": "yInjectSignOutSessionStateManager"
  },
  "invokeAsyncEventCallback": {
    "body": "await On${1:MyEventCallBack}.InvokeAsync(${3:MyParameter});",
    "description": "Inserts an Invoke async Eventcallback",
    "prefix": "yInvokeAsyncEventCallback"
  },
  "isNotNull": {
    "body": "!= null$0",
    "description": "Inserts Is not null",
    "prefix": "yIsNotNull"
  },
  "isNull": {
    "body": "== null$0",
    "description": "Inserts Is equal to null",
    "prefix": "yIsNull"
  },
  "jSRuntimeInvokeAsync": {
    "body": "${1|await, return|} ${2|JSRuntime,jsRuntime,Js,jS|}.InvokeAsync<${3:TResult}>(\"${4:Path-to-JavaScript-function}\", ${5:arguments});",
    "description": "Inserts a JSRuntimeInvokeAsync call",
    "prefix": "yJSRuntimeInvokeAsync"
  },
  "jSRuntimeInvokeVoidAsync": {
    "body": "await ${1|JSRuntime,Js|}.InvokeVoidAsync(\"${3:Path-to-JavaScript-function}\", ${4:arguments});",
    "description": "Inserts a JSRuntimeInvokeVoidAsync call",
    "prefix": "yJSRuntimeInvokeVoidAsync"
  },
  "localStorageGetItemAsync": {
    "body": "var ${1:result} = await ${2|LocalStorage,Storage,_localStorage,_storage|}.GetItemAsync<${3:Type}>(\"${4:Key}\");$0",
    "description": "Inserts await LocalStorage.GetItemAsync stub",
    "prefix": "yLocalStorageGetItemAsync"
  },
  "localStorageRemoveItemAsync": {
    "body": " await ${1|LocalStorage,Storage,_localStorage,_storage|}.RemoveItemAsync(\"${2:key}\");$0",
    "description": "Inserts await LocalStorage.RemoveItemAsync stub",
    "prefix": "yLocalStorageRemoveItemAsync"
  },
  "localStorageSetItemAsync": {
    "body": " await ${1|LocalStorage,Storage,_localStorage,_storage|}.SetItemAsync(\"${2:key}\", ${3:item});$0",
    "description": "Inserts await LocalStorage.SetItemAsync stub",
    "prefix": "yLocalStorageSetItemAsync"
  },
  "methodAsync": {
    "body": [
      "${1|internal,private,public,protected|} async Task$2 ${3:MethodName}${4:Async}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async method stub without arguments",
    "prefix": "yMethodAsync"
  },
  "methodAsyncReturn": {
    "body": [
      "${1|internal,private,public,protected|} async Task<${2:ReturnType}> ${3:MethodName}${4:Async}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async task method stub without arguments",
    "prefix": "yMethodAsyncReturn"
  },
  "methodAsyncReturnWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} async Task<${2:ReturnType}> ${3:MethodName}${4:Async}(${5:paramType} ${6:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async task method stub with arguments",
    "prefix": "yMethodAsyncReturnWithArgs"
  },
  "methodAsyncWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} async Task$2 ${3:MethodName}${4:Async}(${5:paramType} ${6:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async method stub with arguments",
    "prefix": "yMethodAsyncWithArgs"
  },
  "methodReturn": {
    "body": [
      "${1|internal,private,public,protected|} ${2:ReturnType} ${3:MethodName}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a method stub without arguments",
    "prefix": "yMethodReturn"
  },
  "methodReturnWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} ${2:ReturnType} ${3:MethodName}(${4:paramType} ${5:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a method stub with arguments",
    "prefix": "yMethodReturnWithArgs"
  },
  "methodVoid": {
    "body": [
      "${1|internal,private,public,protected|} void ${3:MethodName}()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a void method stub without arguments",
    "prefix": "yMethodVoid"
  },
  "methodVoidWithArgs": {
    "body": [
      "${1|internal,private,public,protected|} void ${3:MethodName}(${4:paramType} ${5:paramName})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a void method stub with arguments",
    "prefix": "yMethodVoidWithArgs"
  },
  "modelBuilderEntity": {
    "body": "${1|builder, modelBuilder|}.Entity<${2:ClassName}>()$0;",
    "description": "Inserts a builder.Entity stub",
    "prefix": "yModelBuilderEntity"
  },
  "navigateTo": {
    "body": "${1|NavigationManager,Navigation,Nav,_navigationManager|}!.NavigateTo(\"${2:routeUrl}\", ${3|false,true|});$0",
    "description": "Inserts a NavigationManager.NavigateTo page",
    "prefix": "yNavigateToPage"
  },
  "navigateToId": {
    "body": "${1|NavigationManager,Navigation,Nav,_navigationManager|}!.NavigateTo($\"${2:routeUrl}/{${3:id}}\", ${4|false,true|});$0",
    "description": "Inserts a NavigationManager.NavigateTo page\\Id",
    "prefix": "yNavigateToId"
  },
  "navigationManagerRefresh": {
    "body": "${1|NavigationManager,Navigation,Nav,_navigationManager|}!.Refresh();$0",
    "description": "Inserts NavigationManager.Refresh()",
    "prefix": "yNavigationManagerRefresh"
  },
  "navigationManagerRefreshForceReload": {
    "body": "${1|NavigationManager,Navigation,Nav,_navigationManager|}!.Refresh(forceReload: true);$0",
    "description": "Inserts NavigationManager.Refresh(forceReload: true)",
    "prefix": "yNavigationManagerRefreshForceReload"
  },
  "onAfterRender": {
    "body": [
      "protected override void OnAfterRender(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an OnAfterRender method stub",
    "prefix": "yOnAfterRender"
  },
  "onAfterRenderAsync": {
    "body": [
      "protected override async Task$1 OnAfterRenderAsync(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an OnAfterRenderAsync method stub",
    "prefix": "yOnAfterRenderAsync"
  },
  "onInitialized": {
    "body": ["protected override void OnInitialized()", "{", "\t$0", "}"],
    "description": "OnInitialized method stub",
    "prefix": "yOnInitialized"
  },
  "onInitializedAsync": {
    "body": [
      "protected override async Task$1 OnInitializedAsync()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an OnInitializedAsync method stub",
    "prefix": "yOnInitializedAsync"
  },
  "onParametersSet": {
    "body": ["protected override void OnParametersSet()", "{", "\t$0", "}"],
    "description": "Inserts an OnParameterSet method stub",
    "prefix": "yOnParametersSet"
  },
  "onParametersSetAsync": {
    "body": [
      "protected override async Task$1 OnParametersSetAsync()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an OnParameterSetAsync method stub",
    "prefix": "yOnParametersSetAsync"
  },
  "paginationState": {
    "body": "protected PaginationState pagination = new PaginationState { ItemsPerPage = ${1:10};$0",
    "description": "Inserts a PaginationState field",
    "prefix": "yPaginationState"
  },
  "parameterAttribute": {
    "body": "[Parameter$1]$0",
    "description": "Inserts a Parameter attribute",
    "prefix": "yParaAttribute"
  },
  "parameterCaptureUnmatchedValues ": {
    "body": "[Parameter$1(CaptureUnmatchedValues = true)] public Dictionary<string, object> ${2:Attributes} { get; set; }$0",
    "description": "Parameter CaptureUnmatchedValues attribute property",
    "prefix": "yParaCaptureUnmatchedValues"
  },
  "parameterIdProperty": {
    "body": [
      "[Parameter$1] public ${2|int,bool,DateTime,decimal,double,float,guid,long,string|} Id { get; set; }$0"
    ],
    "description": "Inserts an Id property with Parameter attribute",
    "prefix": "yParaIdProp"
  },
  "parameterProperty": {
    "body": "[Parameter$1] public ${2:Type} ${3:PropertyName} { get; set; }$0",
    "description": "Inserts a property with Parameter attribute",
    "prefix": "yParaProp"
  },
  "propBirthDate": {
    "body": "public DateTime$1 ${2:BirthDate} { get; ${3|set;,private set;|}  }$0",
    "description": "Inserts a BirthDate property ",
    "prefix": "yPropBirthDate"
  },
  "propCity": {
    "body": "public string ${1:City} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a City property ",
    "prefix": "yPropCity"
  },
  "propConfirmPassword": {
    "body": "public string ${1:ConfirmPassword} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a ConfirmPassword property ",
    "prefix": "yPropConfirmPassword"
  },
  "propCountry": {
    "body": "public string ${1:Country} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Country property ",
    "prefix": "yPropCountry"
  },
  "propDescription": {
    "body": "public string Description{ get; ${1|set;,private set;|} }$0",
    "description": "Inserts a Description property ",
    "prefix": "yPropDescription"
  },
  "propEmail": {
    "body": "public string ${1:Email} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts an Email property ",
    "prefix": "yPropEmail"
  },
  "propEndDate": {
    "body": "public DateTime$2 ${1:EndDate} { get; ${3|set;,private set;|}  }$0",
    "description": "Inserts a DateTime EndDate property ",
    "prefix": "yPropEndDate"
  },
  "propEndTime": {
    "body": "public DateTime$2 ${1:EndTime} { get; ${3|set;,private set;|}  }$0",
    "description": "Inserts a DateTime EndTime property ",
    "prefix": "yPropEndTime"
  },
  "propFilter": {
    "body": "public string Filter{ get; set; }$0",
    "description": "Inserts a Filter property ",
    "prefix": "yPropFilter"
  },
  "propFirstName": {
    "body": "public string ${1:FirstName} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a FirstName property ",
    "prefix": "yPropFirstName"
  },
  "propId": {
    "body": "public ${1|Guid,int,string|} ${2:Id} { get; ${3|set;,private set;|} }$0",
    "description": "Inserts an Id property",
    "prefix": "yPropId"
  },
  "propImageUrl": {
    "body": "public string ${1:ImageUrl} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts an ImageUrl property ",
    "prefix": "yPropImageUrl"
  },
  "propIsVisible": {
    "body": "public bool IsVisible { get; set; } = ${1|false,true|};$0",
    "description": "Inserts an IsVisible property ",
    "prefix": "yPropIsVisible"
  },
  "propLastName": {
    "body": "public string ${1:LastName} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a LastName property ",
    "prefix": "yPropLastName"
  },
  "propMobilePhone": {
    "body": "public string ${1:MobilePhone} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a MobilePhone property ",
    "prefix": "yPropMobilePhone"
  },
  "propName": {
    "body": "public string ${1:Name} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Name property ",
    "prefix": "yPropName"
  },
  "propPage": {
    "body": "public int Page { get; set;} }$0",
    "description": "Inserts a Page property",
    "prefix": "yPropPage"
  },
  "propPassword": {
    "body": "public string ${1:Password} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Password property ",
    "prefix": "yPropPassword"
  },
  "propPhone": {
    "body": "public string ${1:Phone} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Phone property ",
    "prefix": "yPropPhone"
  },
  "propPrice": {
    "body": "public ${1|decimal,float|} ${2|Price, TotalPrice|} { get; ${3|set;,private set;|} }$0",
    "description": "Inserts a Price property ",
    "prefix": "yPropPrice"
  },
  "propQuantity": {
    "body": "public int Quantity { get; set;}$0",
    "description": "Inserts a Quantity property",
    "prefix": "yPropQuantity"
  },
  "propStartDate": {
    "body": "public DateTime$2 ${1:StartDate} { get; ${3|set;,private set;|} }$0",
    "description": "Inserts a DateTime StartDate property ",
    "prefix": "yPropStartDate"
  },
  "propStartTime": {
    "body": "public DateTime$2 ${1:StartTime} { get; ${3|set;,private set;|}  }$0",
    "description": "Inserts a DateTime StartTime property ",
    "prefix": "yPropStartTime"
  },
  "propState": {
    "body": "public string ${1:State} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a State property ",
    "prefix": "yPropState"
  },
  "propStreet": {
    "body": "public string ${1:Street} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a Street property ",
    "prefix": "yPropStreet"
  },
  "propTitle": {
    "body": "public string Title { get; ${1|set;,private set;|} }$0",
    "description": "Inserts a Title property ",
    "prefix": "yPropTitle"
  },
  "propUserId": {
    "body": "public ${1|Guid,int,string|} ${2:UserId} { get; ${3|set;,private set;|} }$0",
    "description": "Inserts an UserId property",
    "prefix": "yPropUserId"
  },
  "propUserName": {
    "body": "public string ${1:UserName} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a UserName property ",
    "prefix": "yPropUserName"
  },
  "propZipCode": {
    "body": "public string ${1:ZipCode} { get; ${2|set;,private set;|} }$0",
    "description": "Inserts a ZipCode property ",
    "prefix": "yPropZipCode"
  },
  "rangeAttribute": {
    "body": "[Range$1(${2:0},${2:1000})]$0",
    "description": "Inserts a Range attribute",
    "prefix": "yRangeAttribute"
  },
  "readAsStringAsync": {
    "body": "var ${1:result} = await ${2:response}.Content.ReadAsStringAsync();$0",
    "description": "Inserts a ReadsAsStringAsync() call",
    "prefix": "yReadAsStringAsync"
  },
  "readFromJsonAsync": {
    "body": "var ${1:responseObject} = await ${2:response}.Content.ReadFromJsonAsync$3<${4:ResponseType}>();$0",
    "description": "Inserts a ReadFromJsonAsync call",
    "prefix": "yReadFromJsonAsync"
  },
  "readIdFromJsonAsync": {
    "body": "var ${1:Name}Id = await ${2:response}.Content.ReadFromJsonAsync<${3|int,string,Guid|}>();$0",
    "description": "Inserts a ReadFromJsonAsync call",
    "prefix": "yReadIdFromJsonAsync"
  },
  "readOnlyHttpClientField": {
    "body": "private readonly HttpClient$2 ${3|_httpClient,_http,http|};$0",
    "description": "Inserts a readonly HttpClient field",
    "prefix": "yReadOnlyHttpClientField"
  },
  "requiredAttribute": {
    "body": "[Required$1]$0",
    "description": "Inserts a RequiredAttribute",
    "prefix": "yRequiredAttribute"
  },
  "routeAttribute": {
    "body": ["[Route(\"${1:api/[controller]/[action]}\")]", "$0"],
    "description": "Inserts a RouteAttribute",
    "prefix": "yRouteAttribute"
  },
  "setParametersAsync": {
    "body": [
      "public override async Task$1 SetParametersAsync(ParameterView Parameters)",
      "{",
      "\tawait base.SetParametersAsync(Parameters);",
      "",
      "\t$0",
      "}"
    ],
    "description": "Inserts a SetParametersAsync method stub",
    "prefix": "ySetParametersAsync"
  },
  "setsRequiredMembersAttribute": {
    "body": "[SetsRequiredMembers$1]$0",
    "description": "Inserts an SetsRequiredMembersAttribute",
    "prefix": "ySetsRequiredMembersAttribute"
  },
  "shouldRender": {
    "body": [
      "protected override bool ShouldRender()",
      "{",
      "\t$0",
      "\treturn true;",
      "}"
    ],
    "description": "Inserts a ShouldRender method stub",
    "prefix": "yShouldRender"
  },
  "stateHasChanged": {
    "body": "StateHasChanged();$0",
    "description": "Inserts a StateHasChanged() method",
    "prefix": "yStateHasChanged"
  },
  "stringLengthAttribute": {
    "body": "[StringLength(${1:50})$2]$0",
    "description": "Inserts a StringLength attribute",
    "prefix": "yStringLengthAttribute"
  },
  "supplyParameterFromForm": {
    "body": ["[SupplyParameterFromForm$1]$0"],
    "description": "Inserts a SupplyParameterFromForm attribute",
    "prefix": "ySupplyParameterFromFormAttribute"
  },
  "taskCompleted": {
    "body": "await Task.CompletedTask;$0",
    "description": "Inserts await Task.CompletedTask",
    "prefix": "yTaskCompleted"
  },
  "updateAsyncMethodDefinition": {
    "body": "Task<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}>$2 UpdateAsync(${3|Guid,int,string|}  ${4:id}, ${5:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}$6 ${7:${5/(.*)/${1:/downcase}/}});$0",
    "description": "Inserts an UpdateAsync method definition for an interface",
    "prefix": "yUpdateAsyncMethodDefinition"
  },
  "updateAsyncResultMethodDefinition": {
    "body": "\tTask<Result<${1:${TM_FILENAME_BASE/([\\I])(.*)(Service)/$2/gi}}Dto>> UpdateAsync(${2|Guid,int,string|} ${3:id}, Update$1Dto$4 input);$0",
    "description": "Inserts a UpdateAsync Result method definition",
    "prefix": "yUpdateAsyncResultMethodDefinition"
  },
  "ctrlHttpGetList": {
    "body": [
      "[HttpGet]",  
      "public async Task<ActionResult<List<${1:Type}>>> Get${2:$1}s()",
      "{",
      "\tvar ${3:${1/(.*)/${1:/downcase}/}}s = new List<$1>();"
      "\t",
      "\treturn Ok($3s);",
      "}"
    ],
    "description": "Generates a HttpGet List action",
    "prefix": "yCtrlHttpGetList",
  },
  "ctrlHttpGet": {
    "body": [
      "[HttpGet(\"{${1:id}}\")]",  
      "public async Task<ActionResult<${2:Type}>> Get${3:$2}(${4|Guid,int,string|} $1)",
      "{",
      "\tvar ${5:${2/(.*)/${1:/downcase}/}} = new $2();"
      "\t",
      "\treturn Ok($5);",
      "}"
    ],
    "description": "Generates a HttpGet action",
    "prefix": "yCtrlHttpGet",
  },
  "ctrlHttpPost": {
    "body": [
      "[HttpPost]",  
      "public async Task<ActionResult<${1:Type}>> Post${2:$1}(${3:$1} ${4:${1/(.*)/${1:/downcase}/}})",
      "{",
      "\tvar ${5:${2/(.*)/${1:/downcase}/}}New = new $2();"
      "\t",
      "\treturn Ok($5);",
      "}"
    ],
    "description": "Generates a HttpPost action",
    "prefix": "yCtrlHttpPost",
  },
  "ctrlHttpDelete": {
    "body": [
      "[HttpDelete(\"{${1:id}}\")]",  
      "public async Task<ActionResult<bool>> Delete${2:Type}(${4|Guid,int,string|} $1)",
      "{",
      "\t",
      "\treturn true;",
      "}"
    ],
    "description": "Generates a HttpDelete action",
    "prefix": "yCtrlHttpDelete",
  },
  "ctrlHttpPut": {
    "body": [
      "[HttpPut()]",  
      "public async Task<ActionResult<bool>> Update${1:Type}(${2:$1} ${3:${1/(.*)/${1:/downcase}/}})",
      "{",
      "\t",
      "\treturn true;",
      "}"
    ],
    "description": "Generates a HttpPut action",
    "prefix": "yCtrlHttpPut",
  }
}
