{
    "addHttpClientWithHttpMessageHandler": {
        "body": ["builder.Services.AddHttpClient<${1:YourService}>(s => s.BaseAddress = new Uri(${2:builder.HostEnvironment.BaseAddress}))", "\t.AddHttpMessageHandler<${3:BaseAddressAuthorizationMessageHandler}>();$0"],
        "prefix": "yAddHttpClientWithHttpMessageHandler"
    },
    "authenticationStateTaskParameter": {
        "body": ["[CascadingParameter$1] ${2:private} Task$3<AuthenticationState$4> ${5:AuthenticationStateTask} { get; set; }$0"],
        "prefix": "yAuthStateTask"
    },
    "cascadingParameter": {
        "body": ["[CascadingParameter$1] ${2:private} ${3:string} ${4:Name} { get; set; }$0"],
        "prefix": "yCascadingPara"
    },
    "eventCallback": {
        "body": ["[Parameter$1] public EventCallback$2 On${3:EventName} { get; set; }$0"],
        "prefix": "yEventCallback"
    },
    "eventCallbackExtended": {
        "body": ["[Parameter] public EventCallback<${1:MouseEventArgs}> On${2:Click} { get; set; }$0"],
        "prefix": "yEventCallbackExtended"
    },
    "eventCallbackOnParameterChanged": {
        "body": ["[Parameter] public ${1:string} ${2:ParameterName} { get; set; }", "", "[Parameter] public EventCallback<$1> $2Changed { get; set; }$0"],
        "prefix": "yEventCallbackOnParameterChanged"
    },
    "eventHandler": {
        "body": ["${1:private} void ${2:Handle}(${3:MouseEventArgs} ${4:e})", "{", "\t$0", "}"],
        "prefix": "yEventHandler"
    },
    "eventHandlerAsync": {
        "body": ["${1:private} async Task$2 ${3:HandleAsync}(${4:MouseEventArgs} ${5:e})", "{", "\t$0", "}"],
        "prefix": "yEventHandlerAsync"
    },
    "getFromByIdJsonAsync": {
        "body": ["${1|var response =, response =, return|} await ${2|HttpClient,_httpClient,http,_http|}.GetFromJsonAsync$3<${4:ResponseType}>($\"${5:url}/{${6:$4}Id}\");"],
        "prefix": "yGetFromByIdJsonAsync"
    },
    "getFromJsonAsync": {
        "body": ["${1|var response =, response =, return|} await ${2|HttpClient,_httpClient,http,_http|}.GetFromJsonAsync$3<${4:ResponseType}>(\"${5:url}\");"],
        "prefix": "yGetFromJsonAsync"
    },
    "getPrivateSet": {
        "body": ["{ get; private set; }$0"],
        "prefix": "gps"
    },
    "getSet": {
        "body": ["{ get; set; }$0"],
        "prefix": "gs"
    },
    "iEnumerable": {
        "body": ["IEnumerable$1<${2:TypeName}>$0"],
        "prefix": "yIEnumerable"
    },
    "inheritsComponentBase": {
        "body": [": ComponentBase$1"],
        "prefix": "yInheritsComponentBase"
    },
    "injectDirective": {
        "body": ["[Inject$1] public ${2:MyService} ${3:$2} { get; set; }$0"],
        "prefix": "yInj"
    },
    "injectHttpClientField": {
        "body": ["private readonly HttpClient$2 ${3|_httpClient,_http,http|};$0"],
        "prefix": "yHttpClientField"
    },
    "injectHttpClientProperty": {
        "body": ["[Inject$1] public HttpClient$2 ${3|HttpClient,Http|} { get; set; }$0"],
        "prefix": "yInjHttpClientProp"
    },
    "injectIJSRuntime": {
        "body": ["[Inject$1] public IJSRuntime$2 ${3|JSRuntime,Js|} { get; set; }$0"],
        "prefix": "yInjIJSRuntime"
    },
    "injectIMapper": {
        "body": ["[Inject$1] public IMapper$2 ${3:Mapper} { get; set; }$0"],
        "prefix": "yInjIMapper"
    },
    "injectNavigationManager": {
        "body": ["[Inject$1] public NavigationManager$2 ${3|NavigationManager,Navigation,Nav|} { get; set; }$0"],
        "prefix": "yInjNavigationManager"
    },
    "injectSignOutSessionStateManager": {
        "body": ["[Inject$1] public SignOutSessionStateManager$2 ${3:SignOutManager} { get; set; }$0"],
        "prefix": "yInjectSignOutSessionStateManager"
    },
    "jSRuntimeInvokeAsync": {
        "body": ["await ${1:JSRuntime}.InvokeAsync<${2:object}>(${3:\"identifier\"}, ${4:args});"],
        "prefix": "jSRuntimeInvokeAsync"
    },
    "navigateTo": {
        "body": ["${1|NavigationManager,Navigation,Nav|}.NavigateTo(\"${1:routeUrl}\");$0"],
        "prefix": "yNavigateTo"
    },
    "navigateToId": {
        "body": ["${1|NavigationManager,Navigation,Nav|}.NavigateTo($\"${1:routeUrl}/{${2:id}}\");$0"],
        "prefix": "yNavigateToId"
    },
    "onAfterRender": {
        "body": ["protected override void OnAfterRender(bool firstRender)", "{", "\t$0", "}"],
        "prefix": "yOnAfterRender"
    },
    "onAfterRenderAsync": {
        "body": ["protected override async Task$1 OnAfterRenderAsync(bool firstRender)", "{", "\t$0", "}"],
        "prefix": "yonAfterRenderAsync"
    },
    "onInitialized": {
        "body": ["protected override void OnInitialized()", "{", "\t$0", "}"],
        "prefix": "yonInitialized"
    },
    "onInitializedAsync": {
        "body": ["protected override async Task$1 OnInitializedAsync()", "{", "\t$0", "}"],
        "prefix": "yOnInitializedAsync"
    },
    "onParametersSet": {
        "body": ["protected override void onParametersSet()", "{", "\t$0", "}"],
        "prefix": "yOnParametersSet"
    },
    "onParametersSetAsync": {
        "body": ["protected override async Task$1 OnParametersSetAsync()", "{", "\t$0", "}"],
        "prefix": "yOnParametersSetAsync"
    },
    "parameter": {
        "body": ["[Parameter$1] public ${2:string} ${3:Name} { get; set; }$0"],
        "prefix": "yPara"
    },
    "parameterCaptureUnmatchedValues ": {
        "body": ["[Parameter$1(CaptureUnmatchedValues = true)] public Dictionary<string, object> ${2:Attributes} { get; set; }$0"],
        "prefix": "yParaCaptureUnmatchedValues"
    },
    "postAsJsonAsync": {
        "body": ["var ${1:response} = await ${2|HttpClient,_httpClient,http,_http|}.PostAsJsonAsync$3(\"${4:url}\", ${5:value});", "response.EnsureSuccessStatusCode();", "var ${6:${5/(.*)/${1:/downcase}/}}Id = await response.Content.ReadFromJsonAsync<${8:TypeName}>();", "return ${9:$6}Id;$0"],
        "prefix": "yPostAsJsonAsync"
    },
    "protectedAsyncTaskMethodNoParameters": {
        "body": ["protected async Task$1 ${2:MethodName}Async()", "{", "\t$0", "}"],
        "prefix": "yProtAsyncTaskMethodNoParameters"
    },
    "protectedAsyncTaskMethodWithParameters": {
        "body": ["protected async Task$1 ${2:MethodName}Async(${3:paramType} ${4:paramName})", "{", "\t$0", "}"],
        "prefix": "yProtAsyncTaskMethodWithParameters"
    },
    "publicAsyncTaskMethodNoParameters": {
        "body": ["public async Task$1 ${2:MethodName}Async()", "{", "\t$0", "}"],
        "prefix": "yPublicAsyncTaskMethodNoParameters"
    },
    "publicAsyncTaskMethodWithParameters": {
        "body": ["public async Task$1 ${2:MethodName}Async(${3:paramType} ${4:paramName})", "{", "\t$0", "}"],
        "prefix": "yPublicAsyncTaskMethodWithParameters"
    },
    "readFromJsonAsync": {
        "body": ["var ${1:Name}Id = await response.Content.ReadFromJsonAsync<int>();$0"],
        "prefix": "yReadIdFromJsonAsync"
    },
    "setParametersAsync": {
        "body": ["public override async Task$1 SetParametersAsync(ParameterView Parameters)", "{", "\t$0", "", "\tawait base.SetParametersAsync(Parameters);", "}"],
        "prefix": "ySetParametersAsync"
    },
    "shouldRender": {
        "body": ["protected override bool ShouldRender()", "{", "\t$0", "\treturn true;", "}"],
        "prefix": "yShouldRender"
    }
}
