{
  "injectHttpClient": {
    "prefix": "yInjectHttpClient",
    "body": ["[Inject$1] HttpClient$2 HttpClient { get; set; }$0"]
  },
  "injectNavigationManager": {
    "prefix": "yInjectNavigationManager",
    "body": [
      "[Inject$1] NavigationManager$2 NavigationManager { get; set; }$0"
    ]
  },
  "injectIJSRuntime": {
    "prefix": "yInjectIJSRuntime",
    "body": ["[Inject$1] IJSRuntime$2 JSRuntime { get; set; }$0"]
  },
  "injectDirective": {
    "prefix": "yInject",
    "body": ["[Inject$1] public ${2:MyService} ${3:$2} { get; set; }$0"]
  },
  "getSet": {
    "prefix": "gs",
    "body": ["{ get; set; }$0"]
  },
  "getPrivateSet": {
    "prefix": "gps",
    "body": ["{ get; private set; }$0"]
  },
  "InheritsComponentBase": {
    "prefix": "yInheritsComponentBase",
    "body": [": ComponentBase$1"]
  },
  "Parameter": {
    "prefix": "yPara",
    "body": ["[Parameter$1] public ${2:string} ${3:Name} { get; set; }$0"]
  },
  "ParameterCaptureUnmatchedValues ": {
    "prefix": "yParaCaptureUnmatchedValues",
    "body": [
      "[Parameter$1(CaptureUnmatchedValues = true)] public Dictionary<string, object> ${2:Attributes} { get; set; }$0"
    ]
  },
  "cascadingParameter": {
    "prefix": "yCascadingPara",
    "body": [
      "[CascadingParameter$1] ${2:private} ${3:string} ${4:Name} { get; set; }$0"
    ]
  },
  "authenticationStateTaskParameter": {
    "prefix": "yAuthStateTask",
    "body": [
      "[CascadingParameter$1] ${2:private} Task$3<AuthenticationState$4> ${5:AuthenticationStateTask} { get; set; }$0"
    ]
  },

  "getFromJsonAsync": {
    "prefix": "yGetFromKJsonAsync",
    "body": [
      "${1:response} = await HttpClient.GetFromJsonAsync$2<${3:Type}>(\"${1:Url}\");"
    ]
  },
  "setParametersAsync": {
    "prefix": "ySetParametersAsync",
    "body": [
      "public override async Task$1 SetParametersAsync(ParameterView Parameters)",
      "{",
      "\t$0",
      "",
      "\tawait base.SetParametersAsync(Parameters);",
      "}"
    ]
  },
  "onInitialized": {
    "prefix": "yonInitialized",
    "body": ["protected override void OnInitialized()", "{", "\t$0", "}"]
  },
  "onInitializedAsync": {
    "prefix": "yOnInitializedAsync",
    "body": [
      "protected override async Task$1 OnInitializedAsync()",
      "{",
      "\t$0",
      "}"
    ]
  },
  "onParametersSet": {
    "prefix": "yOnParametersSet",
    "body": ["protected override void onParametersSet()", "{", "\t$0", "}"]
  },
  "onParametersSetAsync": {
    "prefix": "yOnParametersSetAsync",
    "body": [
      "protected override async Task$1 OnParametersSetAsync()",
      "{",
      "\t$0",
      "}"
    ]
  },
  "onAfterRender": {
    "prefix": "yOnAfterRender",
    "body": [
      "protected override void OnAfterRender(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ]
  },
  "onAfterRenderAsync": {
    "prefix": "yonAfterRenderAsync",
    "body": [
      "protected override async Task$1 OnAfterRenderAsync(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ]
  },
  "shouldRender": {
    "prefix": "yShouldRender",
    "body": [
      "protected override bool ShouldRender()",
      "{",
      "\t$0",
      "\treturn true;",
      "}"
    ]
  },
  "eventHandler": {
    "prefix": "yEventHandler",
    "body": [
      "${1:private} void ${2:Handle}(${3:MouseEventArgs} ${4:e})",
      "{",
      "\t$0",
      "}"
    ]
  },
  "eventHandlerAsync": {
    "prefix": "yEventHandlerAsync",
    "body": [
      "${1:private} async Task$2 ${3:HandleAsync}(${4:MouseEventArgs} ${5:e})",
      "{",
      "\t$0",
      "}"
    ]
  },
  "eventCallback": {
    "prefix": "yEventCallback",
    "body": [
      "[Parameter$1] public EventCallback$2 On${3:EventName} { get; set; }$0"
    ]
  },
  "eventCallbackExtended": {
    "prefix": "yEventCallbackExtended",
    "body": [
      "[Parameter] public EventCallback<${1:MouseEventArgs}> On${2:Click} { get; set; }$0"
    ]
  },
  "eventCallbackOnParameterChanged": {
    "prefix": "yEventCallbackOnParameterChanged",
    "body": [
      "[Parameter] public ${1:string} ${2:ParameterName} { get; set; }",
      "",
      "[Parameter] public EventCallback<$1> $2Changed { get; set; }$0"
    ]
  },
  "jSRuntimeInvokeAsync": {
    "prefix": "jSRuntimeInvokeAsync",
    "body": [
      "await ${1:JSRuntime}.InvokeAsync<${2:object}>(${3:\"identifier\"}, ${4:args});"
    ]
  },
  "protectedAsyncTaskMethodNoParameters": {
    "prefix": "yProtAsyncTaskMethodNoParameters",
    "body": ["protected async Task$1 ${2:MethodName}Async()", "{", "\t$0", "}"]
  },
  "protectedAsyncTaskMethodWithParameters": {
    "prefix": "yProtAsyncTaskMethodWithParameters",
    "body": [
      "protected async Task$1 ${2:MethodName}Async(${3:parameters})",
      "{",
      "\t$0",
      "}"
    ]
  },
  "postAsJsonAsync": {
    "prefix": "yPostAsJsonAsync",
    "body": [
      "var response = await HttpClient.PostAsJsonAsync$1(\"${2:url}\", ${3:value});$0"
    ]
  },
  "readFromJsonAsync": {
    "prefix": "yReadIdFromJsonAsync",
    "body": [
      "var ${1:Name}Id = await response.Content.ReadFromJsonAsync<int>();$0"
    ]
  },
  "navigateTo": {
    "prefix": "yNavigateTo",
    "body": ["NavigationManager.NavigateTo(\"${1:routeUrl}\");$0"]
  },
  "navigateToId": {
    "prefix": "yNavigateToId",
    "body": ["NavigationManager.NavigateTo($\"${1:routeUrl}/{${2:id}}\");$0"]
  }
}
